name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        
    - name: Install tmux
      run: sudo apt-get update && sudo apt-get install -y tmux
        
    - name: Run tests
      run: go test -v ./...
      
    - name: Build
      run: go build -v ./...

  release:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        
    - name: Check for new version
      id: svu
      uses: caarlos0/svu-action@v1
      with:
        pattern: "v[0-9]*"
        
    - name: Create release
      if: steps.svu.outputs.current != steps.svu.outputs.next
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Build binaries for multiple platforms
        GOOS=linux GOARCH=amd64 go build -o tmux-mcp-server-linux-amd64 ./cmd/tmux-mcp-server
        GOOS=linux GOARCH=arm64 go build -o tmux-mcp-server-linux-arm64 ./cmd/tmux-mcp-server
        GOOS=darwin GOARCH=amd64 go build -o tmux-mcp-server-darwin-amd64 ./cmd/tmux-mcp-server
        GOOS=darwin GOARCH=arm64 go build -o tmux-mcp-server-darwin-arm64 ./cmd/tmux-mcp-server
        
        # Create GitHub release
        gh release create ${{ steps.svu.outputs.next }} \
          --title "Release ${{ steps.svu.outputs.next }}" \
          --notes "Automated release ${{ steps.svu.outputs.next }}" \
          tmux-mcp-server-linux-amd64 \
          tmux-mcp-server-linux-arm64 \
          tmux-mcp-server-darwin-amd64 \
          tmux-mcp-server-darwin-arm64
